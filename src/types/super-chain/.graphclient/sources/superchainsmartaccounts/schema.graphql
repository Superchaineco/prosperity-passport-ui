schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AccountBadge {
  id: Bytes!
  user: Bytes!
  badge: Badge!
  tier: BigInt!
  points: BigInt!
}

input AccountBadge_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  badge: String
  badge_not: String
  badge_gt: String
  badge_lt: String
  badge_gte: String
  badge_lte: String
  badge_in: [String!]
  badge_not_in: [String!]
  badge_contains: String
  badge_contains_nocase: String
  badge_not_contains: String
  badge_not_contains_nocase: String
  badge_starts_with: String
  badge_starts_with_nocase: String
  badge_not_starts_with: String
  badge_not_starts_with_nocase: String
  badge_ends_with: String
  badge_ends_with_nocase: String
  badge_not_ends_with: String
  badge_not_ends_with_nocase: String
  badge_: Badge_filter
  tier: BigInt
  tier_not: BigInt
  tier_gt: BigInt
  tier_lt: BigInt
  tier_gte: BigInt
  tier_lte: BigInt
  tier_in: [BigInt!]
  tier_not_in: [BigInt!]
  points: BigInt
  points_not: BigInt
  points_gt: BigInt
  points_lt: BigInt
  points_gte: BigInt
  points_lte: BigInt
  points_in: [BigInt!]
  points_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AccountBadge_filter]
  or: [AccountBadge_filter]
}

enum AccountBadge_orderBy {
  id
  user
  badge
  badge__id
  badge__badgeId
  badge__uri
  tier
  points
}

enum Aggregation_interval {
  hour
  day
}

type Badge {
  id: String!
  badgeId: BigInt!
  uri: String!
  badgeTiers(skip: Int = 0, first: Int = 100, orderBy: BadgeTier_orderBy, orderDirection: OrderDirection, where: BadgeTier_filter): [BadgeTier!]!
}

type BadgeTier {
  id: Bytes!
  points: BigInt!
  tier: BigInt!
  badge: Badge!
  uri: String!
}

input BadgeTier_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  points: BigInt
  points_not: BigInt
  points_gt: BigInt
  points_lt: BigInt
  points_gte: BigInt
  points_lte: BigInt
  points_in: [BigInt!]
  points_not_in: [BigInt!]
  tier: BigInt
  tier_not: BigInt
  tier_gt: BigInt
  tier_lt: BigInt
  tier_gte: BigInt
  tier_lte: BigInt
  tier_in: [BigInt!]
  tier_not_in: [BigInt!]
  badge: String
  badge_not: String
  badge_gt: String
  badge_lt: String
  badge_gte: String
  badge_lte: String
  badge_in: [String!]
  badge_not_in: [String!]
  badge_contains: String
  badge_contains_nocase: String
  badge_not_contains: String
  badge_not_contains_nocase: String
  badge_starts_with: String
  badge_starts_with_nocase: String
  badge_not_starts_with: String
  badge_not_starts_with_nocase: String
  badge_ends_with: String
  badge_ends_with_nocase: String
  badge_not_ends_with: String
  badge_not_ends_with_nocase: String
  badge_: Badge_filter
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BadgeTier_filter]
  or: [BadgeTier_filter]
}

enum BadgeTier_orderBy {
  id
  points
  tier
  badge
  badge__id
  badge__badgeId
  badge__uri
  uri
}

input Badge_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  badgeId: BigInt
  badgeId_not: BigInt
  badgeId_gt: BigInt
  badgeId_lt: BigInt
  badgeId_gte: BigInt
  badgeId_lte: BigInt
  badgeId_in: [BigInt!]
  badgeId_not_in: [BigInt!]
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  badgeTiers_: BadgeTier_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Badge_filter]
  or: [Badge_filter]
}

enum Badge_orderBy {
  id
  badgeId
  uri
  badgeTiers
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type EIP712DomainChanged {
  id: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input EIP712DomainChanged_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [EIP712DomainChanged_filter]
  or: [EIP712DomainChanged_filter]
}

enum EIP712DomainChanged_orderBy {
  id
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type OwnerAdded {
  id: Bytes!
  safe: Bytes!
  newOwner: Bytes!
  superChainId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  superChainSmartAccount: SuperChainSmartAccount!
}

input OwnerAdded_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  safe: Bytes
  safe_not: Bytes
  safe_gt: Bytes
  safe_lt: Bytes
  safe_gte: Bytes
  safe_lte: Bytes
  safe_in: [Bytes!]
  safe_not_in: [Bytes!]
  safe_contains: Bytes
  safe_not_contains: Bytes
  newOwner: Bytes
  newOwner_not: Bytes
  newOwner_gt: Bytes
  newOwner_lt: Bytes
  newOwner_gte: Bytes
  newOwner_lte: Bytes
  newOwner_in: [Bytes!]
  newOwner_not_in: [Bytes!]
  newOwner_contains: Bytes
  newOwner_not_contains: Bytes
  superChainId: String
  superChainId_not: String
  superChainId_gt: String
  superChainId_lt: String
  superChainId_gte: String
  superChainId_lte: String
  superChainId_in: [String!]
  superChainId_not_in: [String!]
  superChainId_contains: String
  superChainId_contains_nocase: String
  superChainId_not_contains: String
  superChainId_not_contains_nocase: String
  superChainId_starts_with: String
  superChainId_starts_with_nocase: String
  superChainId_not_starts_with: String
  superChainId_not_starts_with_nocase: String
  superChainId_ends_with: String
  superChainId_ends_with_nocase: String
  superChainId_not_ends_with: String
  superChainId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  superChainSmartAccount: String
  superChainSmartAccount_not: String
  superChainSmartAccount_gt: String
  superChainSmartAccount_lt: String
  superChainSmartAccount_gte: String
  superChainSmartAccount_lte: String
  superChainSmartAccount_in: [String!]
  superChainSmartAccount_not_in: [String!]
  superChainSmartAccount_contains: String
  superChainSmartAccount_contains_nocase: String
  superChainSmartAccount_not_contains: String
  superChainSmartAccount_not_contains_nocase: String
  superChainSmartAccount_starts_with: String
  superChainSmartAccount_starts_with_nocase: String
  superChainSmartAccount_not_starts_with: String
  superChainSmartAccount_not_starts_with_nocase: String
  superChainSmartAccount_ends_with: String
  superChainSmartAccount_ends_with_nocase: String
  superChainSmartAccount_not_ends_with: String
  superChainSmartAccount_not_ends_with_nocase: String
  superChainSmartAccount_: SuperChainSmartAccount_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnerAdded_filter]
  or: [OwnerAdded_filter]
}

enum OwnerAdded_orderBy {
  id
  safe
  newOwner
  superChainId
  blockNumber
  blockTimestamp
  transactionHash
  superChainSmartAccount
  superChainSmartAccount__id
  superChainSmartAccount__safe
  superChainSmartAccount__initialOwner
  superChainSmartAccount__superChainId
  superChainSmartAccount__noun_background
  superChainSmartAccount__noun_body
  superChainSmartAccount__noun_accessory
  superChainSmartAccount__noun_head
  superChainSmartAccount__noun_glasses
  superChainSmartAccount__blockNumber
  superChainSmartAccount__blockTimestamp
  superChainSmartAccount__transactionHash
}

type OwnerPopulated {
  id: Bytes!
  safe: Bytes!
  newOwner: Bytes!
  superChainId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  superChainSmartAccount: SuperChainSmartAccount!
}

input OwnerPopulated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  safe: Bytes
  safe_not: Bytes
  safe_gt: Bytes
  safe_lt: Bytes
  safe_gte: Bytes
  safe_lte: Bytes
  safe_in: [Bytes!]
  safe_not_in: [Bytes!]
  safe_contains: Bytes
  safe_not_contains: Bytes
  newOwner: Bytes
  newOwner_not: Bytes
  newOwner_gt: Bytes
  newOwner_lt: Bytes
  newOwner_gte: Bytes
  newOwner_lte: Bytes
  newOwner_in: [Bytes!]
  newOwner_not_in: [Bytes!]
  newOwner_contains: Bytes
  newOwner_not_contains: Bytes
  superChainId: String
  superChainId_not: String
  superChainId_gt: String
  superChainId_lt: String
  superChainId_gte: String
  superChainId_lte: String
  superChainId_in: [String!]
  superChainId_not_in: [String!]
  superChainId_contains: String
  superChainId_contains_nocase: String
  superChainId_not_contains: String
  superChainId_not_contains_nocase: String
  superChainId_starts_with: String
  superChainId_starts_with_nocase: String
  superChainId_not_starts_with: String
  superChainId_not_starts_with_nocase: String
  superChainId_ends_with: String
  superChainId_ends_with_nocase: String
  superChainId_not_ends_with: String
  superChainId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  superChainSmartAccount: String
  superChainSmartAccount_not: String
  superChainSmartAccount_gt: String
  superChainSmartAccount_lt: String
  superChainSmartAccount_gte: String
  superChainSmartAccount_lte: String
  superChainSmartAccount_in: [String!]
  superChainSmartAccount_not_in: [String!]
  superChainSmartAccount_contains: String
  superChainSmartAccount_contains_nocase: String
  superChainSmartAccount_not_contains: String
  superChainSmartAccount_not_contains_nocase: String
  superChainSmartAccount_starts_with: String
  superChainSmartAccount_starts_with_nocase: String
  superChainSmartAccount_not_starts_with: String
  superChainSmartAccount_not_starts_with_nocase: String
  superChainSmartAccount_ends_with: String
  superChainSmartAccount_ends_with_nocase: String
  superChainSmartAccount_not_ends_with: String
  superChainSmartAccount_not_ends_with_nocase: String
  superChainSmartAccount_: SuperChainSmartAccount_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnerPopulated_filter]
  or: [OwnerPopulated_filter]
}

enum OwnerPopulated_orderBy {
  id
  safe
  newOwner
  superChainId
  blockNumber
  blockTimestamp
  transactionHash
  superChainSmartAccount
  superChainSmartAccount__id
  superChainSmartAccount__safe
  superChainSmartAccount__initialOwner
  superChainSmartAccount__superChainId
  superChainSmartAccount__noun_background
  superChainSmartAccount__noun_body
  superChainSmartAccount__noun_accessory
  superChainSmartAccount__noun_head
  superChainSmartAccount__noun_glasses
  superChainSmartAccount__blockNumber
  superChainSmartAccount__blockTimestamp
  superChainSmartAccount__transactionHash
}

type OwnerPopulationRemoved {
  id: Bytes!
  safe: Bytes!
  owner: Bytes!
  superChainId: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  superChainSmartAccount: SuperChainSmartAccount!
}

input OwnerPopulationRemoved_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  safe: Bytes
  safe_not: Bytes
  safe_gt: Bytes
  safe_lt: Bytes
  safe_gte: Bytes
  safe_lte: Bytes
  safe_in: [Bytes!]
  safe_not_in: [Bytes!]
  safe_contains: Bytes
  safe_not_contains: Bytes
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  superChainId: String
  superChainId_not: String
  superChainId_gt: String
  superChainId_lt: String
  superChainId_gte: String
  superChainId_lte: String
  superChainId_in: [String!]
  superChainId_not_in: [String!]
  superChainId_contains: String
  superChainId_contains_nocase: String
  superChainId_not_contains: String
  superChainId_not_contains_nocase: String
  superChainId_starts_with: String
  superChainId_starts_with_nocase: String
  superChainId_not_starts_with: String
  superChainId_not_starts_with_nocase: String
  superChainId_ends_with: String
  superChainId_ends_with_nocase: String
  superChainId_not_ends_with: String
  superChainId_not_ends_with_nocase: String
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  superChainSmartAccount: String
  superChainSmartAccount_not: String
  superChainSmartAccount_gt: String
  superChainSmartAccount_lt: String
  superChainSmartAccount_gte: String
  superChainSmartAccount_lte: String
  superChainSmartAccount_in: [String!]
  superChainSmartAccount_not_in: [String!]
  superChainSmartAccount_contains: String
  superChainSmartAccount_contains_nocase: String
  superChainSmartAccount_not_contains: String
  superChainSmartAccount_not_contains_nocase: String
  superChainSmartAccount_starts_with: String
  superChainSmartAccount_starts_with_nocase: String
  superChainSmartAccount_not_starts_with: String
  superChainSmartAccount_not_starts_with_nocase: String
  superChainSmartAccount_ends_with: String
  superChainSmartAccount_ends_with_nocase: String
  superChainSmartAccount_not_ends_with: String
  superChainSmartAccount_not_ends_with_nocase: String
  superChainSmartAccount_: SuperChainSmartAccount_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnerPopulationRemoved_filter]
  or: [OwnerPopulationRemoved_filter]
}

enum OwnerPopulationRemoved_orderBy {
  id
  safe
  owner
  superChainId
  blockNumber
  blockTimestamp
  transactionHash
  superChainSmartAccount
  superChainSmartAccount__id
  superChainSmartAccount__safe
  superChainSmartAccount__initialOwner
  superChainSmartAccount__superChainId
  superChainSmartAccount__noun_background
  superChainSmartAccount__noun_body
  superChainSmartAccount__noun_accessory
  superChainSmartAccount__noun_head
  superChainSmartAccount__noun_glasses
  superChainSmartAccount__blockNumber
  superChainSmartAccount__blockTimestamp
  superChainSmartAccount__transactionHash
}

type PointsIncremented {
  id: Bytes!
  recipient: Bytes!
  points: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  superChainSmartAccount: SuperChainSmartAccount!
}

input PointsIncremented_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  recipient: Bytes
  recipient_not: Bytes
  recipient_gt: Bytes
  recipient_lt: Bytes
  recipient_gte: Bytes
  recipient_lte: Bytes
  recipient_in: [Bytes!]
  recipient_not_in: [Bytes!]
  recipient_contains: Bytes
  recipient_not_contains: Bytes
  points: BigInt
  points_not: BigInt
  points_gt: BigInt
  points_lt: BigInt
  points_gte: BigInt
  points_lte: BigInt
  points_in: [BigInt!]
  points_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  superChainSmartAccount: String
  superChainSmartAccount_not: String
  superChainSmartAccount_gt: String
  superChainSmartAccount_lt: String
  superChainSmartAccount_gte: String
  superChainSmartAccount_lte: String
  superChainSmartAccount_in: [String!]
  superChainSmartAccount_not_in: [String!]
  superChainSmartAccount_contains: String
  superChainSmartAccount_contains_nocase: String
  superChainSmartAccount_not_contains: String
  superChainSmartAccount_not_contains_nocase: String
  superChainSmartAccount_starts_with: String
  superChainSmartAccount_starts_with_nocase: String
  superChainSmartAccount_not_starts_with: String
  superChainSmartAccount_not_starts_with_nocase: String
  superChainSmartAccount_ends_with: String
  superChainSmartAccount_ends_with_nocase: String
  superChainSmartAccount_not_ends_with: String
  superChainSmartAccount_not_ends_with_nocase: String
  superChainSmartAccount_: SuperChainSmartAccount_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PointsIncremented_filter]
  or: [PointsIncremented_filter]
}

enum PointsIncremented_orderBy {
  id
  recipient
  points
  blockNumber
  blockTimestamp
  transactionHash
  superChainSmartAccount
  superChainSmartAccount__id
  superChainSmartAccount__safe
  superChainSmartAccount__initialOwner
  superChainSmartAccount__superChainId
  superChainSmartAccount__noun_background
  superChainSmartAccount__noun_body
  superChainSmartAccount__noun_accessory
  superChainSmartAccount__noun_head
  superChainSmartAccount__noun_glasses
  superChainSmartAccount__blockNumber
  superChainSmartAccount__blockTimestamp
  superChainSmartAccount__transactionHash
}

type Query {
  eip712DomainChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EIP712DomainChanged
  eip712DomainChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: EIP712DomainChanged_orderBy
    orderDirection: OrderDirection
    where: EIP712DomainChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EIP712DomainChanged!]!
  ownerAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnerAdded
  ownerAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnerAdded_orderBy
    orderDirection: OrderDirection
    where: OwnerAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnerAdded!]!
  ownerPopulated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnerPopulated
  ownerPopulateds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnerPopulated_orderBy
    orderDirection: OrderDirection
    where: OwnerPopulated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnerPopulated!]!
  ownerPopulationRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnerPopulationRemoved
  ownerPopulationRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnerPopulationRemoved_orderBy
    orderDirection: OrderDirection
    where: OwnerPopulationRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnerPopulationRemoved!]!
  pointsIncremented(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PointsIncremented
  pointsIncrementeds(
    skip: Int = 0
    first: Int = 100
    orderBy: PointsIncremented_orderBy
    orderDirection: OrderDirection
    where: PointsIncremented_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PointsIncremented!]!
  superChainSmartAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SuperChainSmartAccount
  superChainSmartAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: SuperChainSmartAccount_orderBy
    orderDirection: OrderDirection
    where: SuperChainSmartAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SuperChainSmartAccount!]!
  badgeTier(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BadgeTier
  badgeTiers(
    skip: Int = 0
    first: Int = 100
    orderBy: BadgeTier_orderBy
    orderDirection: OrderDirection
    where: BadgeTier_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BadgeTier!]!
  badge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Badge
  badges(
    skip: Int = 0
    first: Int = 100
    orderBy: Badge_orderBy
    orderDirection: OrderDirection
    where: Badge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Badge!]!
  accountBadge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountBadge
  accountBadges(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountBadge_orderBy
    orderDirection: OrderDirection
    where: AccountBadge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountBadge!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  eip712DomainChanged(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EIP712DomainChanged
  eip712DomainChangeds(
    skip: Int = 0
    first: Int = 100
    orderBy: EIP712DomainChanged_orderBy
    orderDirection: OrderDirection
    where: EIP712DomainChanged_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EIP712DomainChanged!]!
  ownerAdded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnerAdded
  ownerAddeds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnerAdded_orderBy
    orderDirection: OrderDirection
    where: OwnerAdded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnerAdded!]!
  ownerPopulated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnerPopulated
  ownerPopulateds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnerPopulated_orderBy
    orderDirection: OrderDirection
    where: OwnerPopulated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnerPopulated!]!
  ownerPopulationRemoved(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnerPopulationRemoved
  ownerPopulationRemoveds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnerPopulationRemoved_orderBy
    orderDirection: OrderDirection
    where: OwnerPopulationRemoved_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnerPopulationRemoved!]!
  pointsIncremented(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PointsIncremented
  pointsIncrementeds(
    skip: Int = 0
    first: Int = 100
    orderBy: PointsIncremented_orderBy
    orderDirection: OrderDirection
    where: PointsIncremented_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PointsIncremented!]!
  superChainSmartAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SuperChainSmartAccount
  superChainSmartAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: SuperChainSmartAccount_orderBy
    orderDirection: OrderDirection
    where: SuperChainSmartAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SuperChainSmartAccount!]!
  badgeTier(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BadgeTier
  badgeTiers(
    skip: Int = 0
    first: Int = 100
    orderBy: BadgeTier_orderBy
    orderDirection: OrderDirection
    where: BadgeTier_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BadgeTier!]!
  badge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Badge
  badges(
    skip: Int = 0
    first: Int = 100
    orderBy: Badge_orderBy
    orderDirection: OrderDirection
    where: Badge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Badge!]!
  accountBadge(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountBadge
  accountBadges(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountBadge_orderBy
    orderDirection: OrderDirection
    where: AccountBadge_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountBadge!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SuperChainSmartAccount {
  id: Bytes!
  safe: Bytes!
  initialOwner: Bytes!
  superChainId: String!
  noun_background: BigInt!
  noun_body: BigInt!
  noun_accessory: BigInt!
  noun_head: BigInt!
  noun_glasses: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SuperChainSmartAccount_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  safe: Bytes
  safe_not: Bytes
  safe_gt: Bytes
  safe_lt: Bytes
  safe_gte: Bytes
  safe_lte: Bytes
  safe_in: [Bytes!]
  safe_not_in: [Bytes!]
  safe_contains: Bytes
  safe_not_contains: Bytes
  initialOwner: Bytes
  initialOwner_not: Bytes
  initialOwner_gt: Bytes
  initialOwner_lt: Bytes
  initialOwner_gte: Bytes
  initialOwner_lte: Bytes
  initialOwner_in: [Bytes!]
  initialOwner_not_in: [Bytes!]
  initialOwner_contains: Bytes
  initialOwner_not_contains: Bytes
  superChainId: String
  superChainId_not: String
  superChainId_gt: String
  superChainId_lt: String
  superChainId_gte: String
  superChainId_lte: String
  superChainId_in: [String!]
  superChainId_not_in: [String!]
  superChainId_contains: String
  superChainId_contains_nocase: String
  superChainId_not_contains: String
  superChainId_not_contains_nocase: String
  superChainId_starts_with: String
  superChainId_starts_with_nocase: String
  superChainId_not_starts_with: String
  superChainId_not_starts_with_nocase: String
  superChainId_ends_with: String
  superChainId_ends_with_nocase: String
  superChainId_not_ends_with: String
  superChainId_not_ends_with_nocase: String
  noun_background: BigInt
  noun_background_not: BigInt
  noun_background_gt: BigInt
  noun_background_lt: BigInt
  noun_background_gte: BigInt
  noun_background_lte: BigInt
  noun_background_in: [BigInt!]
  noun_background_not_in: [BigInt!]
  noun_body: BigInt
  noun_body_not: BigInt
  noun_body_gt: BigInt
  noun_body_lt: BigInt
  noun_body_gte: BigInt
  noun_body_lte: BigInt
  noun_body_in: [BigInt!]
  noun_body_not_in: [BigInt!]
  noun_accessory: BigInt
  noun_accessory_not: BigInt
  noun_accessory_gt: BigInt
  noun_accessory_lt: BigInt
  noun_accessory_gte: BigInt
  noun_accessory_lte: BigInt
  noun_accessory_in: [BigInt!]
  noun_accessory_not_in: [BigInt!]
  noun_head: BigInt
  noun_head_not: BigInt
  noun_head_gt: BigInt
  noun_head_lt: BigInt
  noun_head_gte: BigInt
  noun_head_lte: BigInt
  noun_head_in: [BigInt!]
  noun_head_not_in: [BigInt!]
  noun_glasses: BigInt
  noun_glasses_not: BigInt
  noun_glasses_gt: BigInt
  noun_glasses_lt: BigInt
  noun_glasses_gte: BigInt
  noun_glasses_lte: BigInt
  noun_glasses_in: [BigInt!]
  noun_glasses_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SuperChainSmartAccount_filter]
  or: [SuperChainSmartAccount_filter]
}

enum SuperChainSmartAccount_orderBy {
  id
  safe
  initialOwner
  superChainId
  noun_background
  noun_body
  noun_accessory
  noun_head
  noun_glasses
  blockNumber
  blockTimestamp
  transactionHash
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}